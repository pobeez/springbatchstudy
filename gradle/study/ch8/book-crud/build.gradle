apply plugin: 'war'
apply plugin: 'groovy'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
  }
}
apply plugin: 'com.bmuschko.tomcat-base'

ext {
  tomcatStopPort = 8081
  tomcatStopKey = 'stopKey'
}

sourceSets {
    integrationTest {
        groovy.srcDir file('src/integrationTest/groovy')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testCompile
        runtimeClasspath = output + compileClasspath + configurations.testRuntime
    }
    functionalTest {
        groovy.srcDir file('src/functionalTest/groovy')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testCompile
        runtimeClasspath = output + compileClasspath + configurations.testRuntime
    }
}

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava, compileIntegrationTestGroovy, compileFunctionalTestGroovy]*.options*.encoding = defaultEncoding

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.mybatis:mybatis:3.2.6'
    compile 'org.mybatis:mybatis-spring:1.2.2'
    compile 'org.aspectj:aspectjweaver:1.7.4'
    compile 'org.springframework:spring-context:4.0.3.RELEASE'
    compile 'org.springframework:spring-webmvc:4.0.3.RELEASE'
    compile 'org.springframework:spring-jdbc:4.0.3.RELEASE'
    compile 'org.thymeleaf:thymeleaf:2.1.2.RELEASE'
    compile 'org.thymeleaf:thymeleaf-spring4:2.1.2.RELEASE'
    compile 'log4j:log4j:1.2.16'
    
    // unit test
    testCompile 'junit:junit:4.11'
	testCompile 'org.mockito:mockito-core:1.9.5'

    // integration test
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'org.spockframework:spock-spring:0.7-groovy-2.0'
    testCompile 'org.springframework:spring-test:4.0.3.RELEASE'
    // functional test
    testCompile "org.gebish:geb-core:0.9.2"
    testCompile 'org.gebish:geb-spock:0.9.2'
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:2.43.1"
    testCompile "org.seleniumhq.selenium:selenium-support:2.43.1"
    
    runtime 'com.h2database:h2:1.3.175'
    runtime 'org.slf4j:slf4j-api:1.6.1'
    runtime 'org.slf4j:slf4j-log4j12:1.6.1'
    
    def tomcatVersion = '7.0.52'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
      exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
}

test {
    maxParallelForks = 2
    reports.html.destination = file("$reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}

task copyEnvironmentResource(type: Copy) {
	description "env.properties를 복사한다"
	from "environments/${env}/env.properties"
	into project.sourceSets.main.output.resourcesDir
}
classes.dependsOn copyEnvironmentResource

task integrationTest(type: Test) {
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/integration")
    reports.junitXml.destination = file("$reports.junitXml.destination/integration")
}

task tomcatRun4FunctionalTest(type: com.bmuschko.gradle.tomcat.tasks.TomcatRunWar) {
    stopPort = tomcatStopPort
    stopKey = tomcatStopKey
    daemon = true
}

task tomcatStop4FunctionalTest(type: com.bmuschko.gradle.tomcat.tasks.TomcatStop) {
    stopPort = tomcatStopPort
    stopKey = tomcatStopKey
}

task functionalTest(type: Test) {
    group = 'verification'
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("functional/geb")
	
	dependsOn tomcatRun4FunctionalTest
    finalizedBy tomcatStop4FunctionalTest

    minHeapSize = '512m'
    maxHeapSize = '512m'
    jvmArgs '-XX:PermSize=128m'
    jvmArgs '-XX:MaxPermSize=128m'
}
